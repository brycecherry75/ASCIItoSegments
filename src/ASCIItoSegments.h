#ifndef ASCIItoSegments_h
#define ASCIItoSegments_h

#include <Arduino.h>

const uint8_t DigitASCIIoffset = 0x20; // skip control codes
const uint8_t DigitASCIIlimit = 0x7F; // up to the limit of primary ASCII characters
const uint8_t LowercaseLetterCount = 26;
const uint8_t LowercaseLetterSkipStart = 0x61;
const uint8_t AvailableASCIIcharacters = 96;
const uint8_t LowercaseLetterOffset = 0x20;

/*

   ASCII characters in order:

   (control codes skipped)
   (space) ! " # $ % ^ ' ( ) * + , - . /
   0 1 2 3 4 5 6 7 8 9 0
   : ; < = > ? @
   A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
   [ \ ] ^ _ `
   (lowercase steps skipped)
   { | } ~ ⌂

   Undisplayable characters for a particular display are 0x00 (no segments active)

*/

const uint8_t ASCIItoSegments_DigitCount = ((DigitASCIIlimit - DigitASCIIoffset - LowercaseLetterCount) + 1); // lowercase digits will be converted to uppercase and lowercase letters skipped

const uint8_t ASCIItoSegments_Digits[ASCIItoSegments_DigitCount] PROGMEM = {

  0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,

  0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,

  0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x40,

  0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A,

  0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60,

  0x7B, 0x7C, 0x7D, 0x7E, 0x7F

};

/*

   Displayable characters: 

   (control codes skipped)
   (space) " ' ( ) , -
   0 1 2 3 4 5 6 7 8 9 0
   = ? @
   A B C D E F G H I J L N O P R S T U Y
   [ ] _ `
   (lowercase steps skipped)
   | ~

*/

const uint8_t ASCIItoSegmentsDigits_7segment[ASCIItoSegments_DigitCount] PROGMEM = {

  0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x02, 0x39, 0x0F, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00,

  0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F,

  0x00, 0x00, 0x00, 0x48, 0x00, 0x53, 0x7B,

  0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71, 0x7D, 0x76, 0x06, 0x1E, 0x00, 0x38, 0x00, 0x54, 0x3F, 0x73, 0x00, 0x50, 0x6D, 0xF8, 0x3E, 0x00, 0x00, 0x00, 0x6E, 0x00,

  0x39, 0x00, 0x0F, 0x00, 0x08, 0x20,

  0x00, 0x06, 0x00, 0x01, 0x00

};

/*

   Displayable characters:

   (control codes skipped)
   (space) " $ ^ ' ( ) * + , - /
   0 1 2 3 4 5 6 7 8 9 0
   < = > ? @
   A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
   [ \ ] ^ _ `
   (lowercase steps skipped)
   { | } ~ ⌂
   
*/

const uint16_t ASCIItoSegmentsDigits_14segment[ASCIItoSegments_DigitCount] PROGMEM = {

  0x0000, 0x0000, 0x0022, 0x0000, 0x298D, 0x0000, 0x1400, 0x0200, 0x0600, 0x3000, 0x3FC0, 0x09C0, 0x1000, 0x00C0, 0x0000, 0x1200,

  0x123F, 0x0006, 0x00DB, 0x00CF, 0x00E6, 0x00ED, 0x00FD, 0x0007, 0x00FF, 0x00EF,

  0x0000, 0x0000, 0x1208, 0x00C8, 0x3000, 0x0883, 0x085F,

  0x00F7, 0x098F, 0x0039, 0x090F, 0x00F9, 0x00F1, 0x00BD, 0x00F6, 0x0909, 0x001E, 0x0670, 0x0038, 0x2236, 0x2436, 0x003F, 0x00F3, 0x043F, 0x0473, 0x208D, 0x0901, 0x003E, 0x1230, 0x1436, 0x3600, 0x2A00, 0x1209,

  0x0039, 0x2400, 0x000F, 0x1400, 0x0008, 0x2000,

  0x0640, 0x0900, 0x3080, 0x0001, 0x1408

};

/*

   Displayable characters:

   (control codes skipped)
   (space) " $ % ^ ' ( ) * + , - /
   0 1 2 3 4 5 6 7 8 9 0
   < = > ? @
   A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
   [ \ ] ^ _ `
   (lowercase steps skipped)
   { | } ~ ⌂

*/

const uint16_t ASCIItoSegmentsDigits_16segment[ASCIItoSegments_DigitCount] PROGMEM = {

  0x0000, 0x0000, 0x0084, 0x0000, 0x2B3B, 0xEE99, 0x5000, 0x0400, 0x1400, 0x4100, 0xFF00, 0xAA00, 0x4000, 0x8800, 0x0000, 0x4400,

  0x44FF, 0x000C, 0x8877, 0x883F, 0x888C, 0x88BB, 0x88FB, 0x000F, 0x88FF, 0x88BF,

  0x0000, 0x0000, 0x4430, 0x8830, 0x1130, 0x2807, 0xA07F,

  0x88CF, 0x2A3F, 0x00F3, 0x223F, 0x88F3, 0x88C3, 0x08FB, 0x88CC, 0x2233, 0x2223, 0x94C0, 0x00F0, 0x05CC, 0x11CC, 0x00FF, 0x88C7, 0x10FF, 0x98C7, 0x093B, 0x2203, 0x00FC, 0x44C0, 0x50CC, 0x5500, 0x2500, 0x4433,

  0x00E1, 0x1100, 0x001E, 0x5000, 0x0030, 0x0100, 

  0xA212, 0x2200, 0x2A21, 0x0003, 0x5030

};

class ASCIItoSegmentsClass {
  public:
    uint8_t Convert7Segment(uint8_t ASCIIdata, uint8_t DecimalPointSegment, bool DecimalPointActive, uint8_t *SegmentOrder, bool PROGMEMused);
    uint16_t Convert14Segment(uint8_t ASCIIdata, uint8_t DecimalPointSegment, bool DecimalPointActive, uint8_t *SegmentOrder, bool PROGMEMused);
    uint32_t Convert16Segment(uint8_t ASCIIdata, uint8_t DecimalPointSegment, bool DecimalPointActive, uint8_t *SegmentOrder, bool PROGMEMused);
};

extern ASCIItoSegmentsClass ASCIItoSegments;

#endif